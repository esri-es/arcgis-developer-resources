{
  "snippets": [
    {
      "name": "console-save.js",
      "content": "(function(console){\n\n    console.save = function(data, filename){\n\n        if(!data) {\n            console.error('Console.save: No data')\n            return;\n        }\nasdasdas\n        function censor(censor) {\n          var i = 0;\n\n          return function(key, value) {\n            \n            if(typeof(value) === \"string\" && value[0] === \"_\")\n                return '[Hidden field]';\n                \n            if(i !== 0 && typeof(censor) === 'object' && typeof(value) == 'object' && censor == value) \n              return '[Circular]'; \n\n            if(i >= 275) // seems to be a harded maximum of 30 serialized objects?\n              return '[Unknown]';\n\n            ++i; // so we know we aren't using the original object anymore\n\n            return value;  \n          }\n        }\n\n        var data = JSON.stringify(data, censor(data), 4);\n\n        if(!filename) filename = 'console.json'\n\n        if(typeof data === \"object\"){\n            data = JSON.stringify(data, undefined, 4)\n        }\n\n        var blob = new Blob([data], {type: 'text/json'}),\n            e    = document.createEvent('MouseEvents'),\n            a    = document.createElement('a')\n\n        a.download = filename\n        a.href = window.URL.createObjectURL(blob)\n        a.dataset.downloadurl =  ['text/json', a.download, a.href].join(':')\n        e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)\n        a.dispatchEvent(e)\n    }\n})(console)"
    },
    {
      "name": "find-object-key.js",
      "content": "function getObject(theObject) {\n    var result = null;\n    if(theObject instanceof Array) {\n        for(var i = 0; i < theObject.length; i++) {\n            result = getObject(theObject[i]);\n            if (result) {\n                break;\n            }   \n        }\n    }\n    else\n    {\n        var key = theObject.key;\n        var obj = theObject.obj\n        for(var prop in obj) {\n            console.log(prop + ': ' + obj[prop]);\n            \n            if(prop == key) {\n                console.log(prop + ': ' + obj[prop]);\n                if(obj[prop] == 1) {\n                    return obj;\n                }\n            }\n            if(obj[prop] instanceof Object || obj[prop] instanceof Array) {\n                result = getObject(obj[prop]);\n                if (result) {\n                    break;\n                }\n            } \n        }\n    }\n    return result;\n}"
    },
    {
      "name": "arcgis-jsapi-4x.js",
      "content": "window.$jsapi4x = window.$jsapi4x || {\n    getExtent: null,\n    getLatLon: null,\n    zoomToSceneLayer: null,\n    openPlayground: null\n};\n\n/*\n    // WebGL (BETA) is cool, let's use by default\n    var dojoConfig = {has: {\"esri-featurelayer-webgl\": 1}};\n*/\n\n// Get a View's extent\n$jsapi4x.getExtent = function(view){\n    console.log(\"extent = \", view.extent.toJSON());\n};\n\n// Get Latitude and Longitude\n$jsapi4x.getLatLon = function(view){\n    console.log(\"view.extent.center = \", view.extent.center);\n};\n\n$jsapi4x.zoomToSceneLayer = function(view){\n    sceneLayer.then(() => {\n      view.extent = sceneLayer.fullExtent;\n    });\n}\n\n$jsapi4x.openPlayground = function(){\n    window.open('https://developers.arcgis.com/javascript/latest/sample-code/playground/live/index.html', '_blank');\n}"
    },
    {
      "name": "showUrlParameters.js",
      "content": "(function () {\n    var search = location.search.substring(1);\n    if(search){\n        var obj = decodeURI(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"');\n        console.log(\"obj = \", obj);\n        console.log(JSON.parse('{\"' + obj  + '\"}'));\n    }else{\n        console.warn(\"No GET params in the URL\");\n    }\n})()"
    },
    {
      "name": "arcgis-agols-url-search.js",
      "content": "window.$agoSearch = window.$agoSearch || {\n    itemMetadata: null,\n    orgItemsById: null,\n    itemsByTypeKeyword: null,\n    getOrgFromFeatureService: null\n};\n\n// Sample: $agoSearch.itemMetadata(\"4d29eb6f07e94b669c0b90c2aa267100\")\n$agoSearch.itemMetadata = function(itemId){\n    if(!itemId){\n        itemId = $agoSearch.getUrlParametersfunction().id;\n    }\n    window.open(`http://www.arcgis.com/sharing/rest/content/items/${itemId}?f=json`, '_blank');\n}\n\n// Sample: $agoSearch.orgItems(\"f2vDwAxkYCKm4Ckx\")\n$agoSearch.orgItemsById = function(orgid){\n    window.open(`http://www.arcgis.com/home/search.html?q=orgid%3A${orgid}&t=content&start=1&sortOrder=desc&sortField=modified`, '_blank');\n}\n\n// Sample: $agoSearch.itemsByTypeKeyword(\"VR360\")\n$agoSearch.itemsByTypeKeyword = function(keyword){\n    var validTypekeywords = [\"VR360\", \"\\\"Web Map\\\"\", \"3D\", \"Map\", \"Scene\", \"Web\", \"\\\"ArcGIS Pro\\\"\", \"Data\", \"Service\", \"\\\"Feature Service\\\"\", \"\\\"ArcGIS Server\\\"\", \"\\\"Feature Access\\\"\"];\n    if(validTypekeywords.indexOf(keyword) === -1){\n        console.log(\"Registered as valid keywords = \", validTypekeywords);\n        var arcgisDoc = \"http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Items_and_item_types/02r3000000ms000000/\";\n        console.log(`Find more at: ${arcgisDoc}`);\n    }else{\n        window.open(`http://www.arcgis.com/home/search.html?q=typekeywords%3A${keyword}&t=content&start=1&sortOrder=desc&sortField=relevance`, '_blank');\n    }\n}\n\n// Sample: $agoSearch.getOrgFromFeatureService(\"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/usa_cbsa/FeatureServer\");\n$agoSearch.getOrgFromFeatureService = function(url){\n    if(!url){\n        url = window.location.href;\n    }\n    url = url.split(\"/\");\n    console.log(\"orgid = \", url[3]);\n}\n\n\n/*\n    More searches:\n    https://github.com/esri-es/arcgis-search\n*/\n\n$agoSearch.getUrlParametersfunction = function(){\n    var search = location.search.substring(1);\n    if(search){\n        var obj = decodeURI(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"');\n        return JSON.parse('{\"' + obj  + '\"}');\n\n    }else{\n        console.warn(\"No GET params in the URL\");\n    }\n}"
    },
    {
      "name": "import-export-devtool-snippets.js",
      "content": "/*\n\nHOW TO:\nOpen Inspector (ctrl+shift+I)\nUndock Inspector in Seperate Window\nInspect Inspector (ctrl+shift+i)\nPaste the next Script Into Console:\n\nMore info: https://gist.github.com/soundyogi/03df95505604c8351212\n\n*/\n\nvoid function(){\n\"use strict\"\n/*\n* Manage and Import / Export snippets from chrome (2016)\n* hacked together by: http://github.com/soundyogi\n* inspired by: https://github.com/bgrins/devtools-snippets/blob/master/import-export/chrome/devtools_import_export.js\n* ALPHA / SILLY SIDE PROJECT \n*/\n\n\nlet_us(\"execute some init tests\", () => {\n  if(location.origin !== \"chrome-devtools://devtools\") throw Error(\"not in devtools of devtools / please inspect devtools again (ctrl+shift+i)\")\n  ok(location.origin === \"chrome-devtools://devtools\", 'we are in devtools of devtools, good to go')\n})\n\n\nconst state = {\n  scriptSnippets: [],\n}\nwindow.state = state\n\n\nconst style = `\n<style>\nbody{\n  margin: 0;\n  padding: 0;\n}\ngrid {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-flex-flow: column;\n}\ncolumn {\n  display: flex;\n  -webkit-flex-flow: column;\n  width: 30vw;\n}\nrow {\n  display: flex;\n  -webkit-flex-flow: row;\n  width: 90vw;\n  margin-bottom: 2vh;\n}\nitem {\n  background: tomato;\n  min-height: 13vh;\n  color: white;\n  font-weight: bold;\n  font-size: 1.5em;\n  text-align: center;\n  padding: 20px;\n}\n#drop_files {\n    opacity: 0;\n    width: 100%;\n    height: 20vh;\n}\ndropzone {\n  cursor: pointer;\n  border: 1px black dotted;\n  font-weight: bold;\n  font-size: 1em;\n  text-align: center;\n}\n</style>\n`\n\nconst markup = `\n<grid>\n  <row>\n      <column>\n      <item> load chrome snippets:\n        <button id=\"init\">(re)init</button>\n      </item>\n      </column>\n      <column>\n      <item>\n        <label>on name conflicts:\n          <select id='rename'>\n            <option value='true'>Rename Import Files</option>\n            <option value=\"false\">Overwrite Snippets</option>\n          </select>\n        </label>\n      </item>\n      </column>\n      <column>\n      <item>\n        <button id=\"export_snippets\">export</button>\n        <select id='format'>\n          <option value=\"json\">Single .json</option>\n          <option value=\"js\">Multiple .js</option>\n        </select>\n      </item>\n      </column>\n      <column>\n      <item>\n        <button id=\"save_snippets\">Save to Chrome</button>\n      </item>\n      </column>\n      <column>\n      <item>\n        <button id=\"reset_snippets\">DELETE all on Chrome</button>\n      </item>\n      </column>\n  </row>\n  <row>\n  <column>\n    <dropzone>\n      <div>Click/Drop .js or .json</div>\n      <input id=\"drop_files\" type='file' multiple='true'/>\n    </dropzone>\n    <label>append files or replace everything?\n      <select id='append'>\n        <option value='true'>Append</option>\n        <option value=\"false\">Replace</option>\n      </select>\n    </label>\n  </column>\n  <column>===== snippets preview =====<ul id=\"state.scriptSnippets\"></ul></column>\n  <column>import files from external sources:\n  <button id=\"external_bgrins\">load some scripts from bgrins/devtools-snippets repo</button>\n  <button id=\"external_bahmutov\">load some scripts from bahmutov/code-snippets repo</button>\n  </column>\n  </row>\n</grid>\n`\n\n\n/* Main logic \n*/\nconst app_window = create_window(\"menubar=false, height=700, width=1000\", \"chrome snippets import/export - ALPHA USE AT OWN RISK\")\nconst document = app_window.document\n\nlet_us(\"bootstrap the whole thing\", () => {\n  init()\n})\n\nfunction init(){\n  setupGUI()\n\n  state.scriptSnippets = []\n  state.lastIdentifier = 0\n  state.gui_switches = {\n    rename: true,\n    format: \"json\",\n    review: false,\n    append: true\n  }\n\n  InspectorFrontendHost.getPreferences( prefs => {\n    const lastScriptSnippets = prefs.scriptSnippets\n    state.scriptSnippets = deserialize(lastScriptSnippets)\n    state.lastIdentifier = prefs.scriptSnippets_lastIdentifier\n\n    update()\n  })\n}\n\n\nfunction setupGUI(){\n  app_window.document.body.innerHTML = style+markup\n  getID(\"format\").on(\"change\", handle_gui_switches)\n  getID(\"rename\").on(\"change\", handle_gui_switches)\n  getID(\"append\").on(\"change\", handle_gui_switches)\n\n  getID(\"drop_files\").on(\"change\", import_files)\n\n  getID(\"export_snippets\").on(\"click\", export_snippets)\n  getID(\"init\").on(\"click\", init)\n  getID(\"save_snippets\").on(\"click\", save_snippets)\n  getID(\"reset_snippets\").on(\"click\", reset_snippets)\n\n  getID(\"external_bgrins\").on(\"click\", external_bgrins)\n  getID(\"external_bahmutov\").on(\"click\", external_bahmutov)\n}\n\n\nfunction handle_gui_switches(ev){\n    const target = ev.target\n    const opt = state.gui_switches\n\n    if(target.id === 'format') {\n      opt.format = target.value\n      return update()\n    }\n    if(target.id === 'rename') {\n      opt.rename = !target.value\n      return update()\n    }\n    if(target.id === 'review') {\n      opt.review = !opt.review\n      return update()\n    }\n    if(target.id === 'append') {\n      opt.append = !target.value\n      return update()\n    }\n}\n\n\nfunction update(){\n    render_list()\n    console.log(state.gui_switches)\n}\n\nfunction render_list(){\n    const ul = app_window.document.getElementById(\"state.scriptSnippets\")\n    ul.innerHTML = ''\n    \n    state.scriptSnippets.forEach((snippet)=>{\n      const li = document.createElement('li')\n      //const a = document.createElement('a')\n      //a.href = snippet.name\n      li.innerHTML = snippet.name\n      //li.appendChild(a)\n      ul.appendChild(li)\n    })\n}\n\n\n/* Helpers\n*/\n\n\nfunction import_files(event){\n  if(!state.gui_switches.append) state.scriptSnippets = []\n\n  const files = event.target.files\n  const stack = Object.keys(files)\n    .forEach((key)=>{\n      const file = files[key]\n      const reader = new FileReader()\n      reader.fileName = file.name\n      reader.onerror = (()=> {throw Error})\n      reader.onabort = (()=> {throw Error})\n      reader.onload = file_loaded\n      reader.readAsText(file)\n    })\n}\n\n\nfunction file_loaded(event){\n  const content_string = event.target.result\n  const fileName = event.target.fileName\n  const fileNameNoExt = /(.+?)(\\.[^.]*$|$)/.exec(fileName)[1]\n  const ext = /\\.[0-9a-z]+$/.exec(fileName)[0]\n\n  if(ext === \".json\") return import_json(content_string)\n  return add_snippet(fileNameNoExt, content_string)\n}\n\nfunction import_json(content_string){\n  var json_data = deserialize(content_string)\n  json_data.snippets.forEach(snippet => {\n    add_snippet(snippet.name, snippet.content)\n  })\n}\n\nfunction set_pref(name, data_string){\n  InspectorFrontendHost.setPreference(name, data_string)\n}\n\n\nfunction save_snippets(){\n  set_pref( \"scriptSnippets\", serialize(state.scriptSnippets) )\n  set_pref( \"scriptSnippets_lastIdentifier\", state.lastIdentifier)\n  prompt('restart chrome now!')\n}\n\n\nfunction reset_snippets(){\n  var choice = window.confirm(\"DELETE ALL SNIPPETS IN DEVTOOLS?\")\n  if(choice) clear_chrome_snippets()\n  init()\n}\n\nfunction clear_chrome_snippets(){\n  set_pref(\"scriptSnippets\", \"[]\")\n  set_pref(\"scriptSnippets_lastIdentifier\", \"0\")\n}\n\nfunction add_snippet(name, snippet_content_string){\n  if(is_duplicate(name, state.scriptSnippets)) {\n    if(!state.gui_switches.rename) return state.scriptSnippets[name] = snippet_content_string\n    return add_snippet(name+\"copy\", snippet_content_string)\n  }\n\n  const currentIdentifier = serialize(parseInt(state.lastIdentifier)+1)\n  const new_snip = {\n    content: snippet_content_string,\n    id: currentIdentifier,\n    name: name \n  }\n\n  state.scriptSnippets.push( new_snip )\n  state.lastIdentifier = currentIdentifier\n  update()        \n}\n\nfunction external_bgrins(){\n\n    const brings_snippets = [\n    'allcolors',\n    'cachebuster',\n    'cssreload',\n    'cssprettifier',\n    'hashlink'\n  ]\n\n  brings_snippets.forEach((snippet)=>{\n    request('https://raw.githubusercontent.com/bgrins/devtools-snippets/master/snippets/'+snippet+'/'+snippet+'.js', function(request){\n      const snippet_content_string = request.target.response\n      add_snippet(snippet, snippet_content_string)\n    })\n  })\n}\n\nfunction external_bahmutov(){\n\n    const bahmutov_snippets = [\n    'timing',\n    'profile-method-call',\n    'time-method-call'\n  ]\n\n  bahmutov_snippets.forEach((snippet)=>{\n    request('https://raw.githubusercontent.com/bahmutov/code-snippets/master/'+snippet+'.js', function(request){\n      const snippet_content_string = request.target.response\n      add_snippet(snippet, snippet_content_string)\n    })\n  })\n}\n\nfunction export_snippets(){\n    if(state.gui_switches.format === \"json\") return download_json()\n    return download_js()\n}\n\nfunction download_js(){\n    state.scriptSnippets.forEach((snippet)=>{\n        download(snippet.name+'.js', snippet.content)\n    })\n}\n\nfunction download_json(){\n  console.log(\"json\")\n    const fileName = serialize(Date())\n    const json_data = serialize({'snippets': state.scriptSnippets}, ['snippets', 'name', 'content'], 2)\n    download(fileName+\".json\", json_data)\n}\n\n\n\n/* util & shorthand\n*/\nfunction request(url, success) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onload = success;\n    xhr.send();\n  return xhr;\n}\n\n\nfunction getID(id){\n    const element =  app_window.document.getElementById(id)\n    element.on = function on(event_name, fn){\n      this.addEventListener(event_name, fn)\n      return this\n    }\n    return element\n}\n\n\nfunction serialize(object, ...rest){\n  if(!object) throw Error(\"serialize needs an object\")\n  return JSON.stringify(object, ...rest)\n}\n\n\nfunction deserialize(string){\n  if(typeof string !== \"string\") throw Error(\"deserialize needs a string\")\n  if(string === \"\") throw Error(\"no snippets present\")\n  return JSON.parse(string)\n}\n\nfunction download(name, data){\n   const Blob = new window.Blob([data],{\n        'type': 'text/utf-8'\n    })\n    const a = document.createElement('a')\n    \n    a.href = URL.createObjectURL(Blob)\n    a.download = name\n    a.click()\n}\n\n\nfunction is_duplicate(name, snippets_arr){\n  const result = snippets_arr.filter(function(snippet){\n    return snippet.name === name\n  })\n\n  if(result.length === 0) return false\n  return true\n}\n\n\nfunction create_window(options, title){\n  const w = window.open(\"\", \"\", options)\n  w.document.title = title\n  return w\n}\n\n\n/* \n* UNIT TESTS\n*/\nlet_us(\"write some tests\", ()=>{\n  // TODO\n  // TDD tests are deleted now / remove harness\n})\n\n\n/* Nanoharness \n*/\nfunction let_us(msg,f){\n  console.log(\"we_will: \"+msg)\n  try { f() }\n  catch (exception) {\n     console.warn(exception.stack.replace(/:(\\d+):(\\d+)/g, \"$& (Line $1, Column $2)\"))\n  }\n}\n\nfunction ok(expr, msg){\n  log(expr, msg)\n}\n\nfunction log(expr, msg){\n  expr ? console.log(\"!pass \"+msg) : console.log(\"?fail \"+msg)\n}\n\nfunction html_log(){\n  const queue = []\n  return function log(expr, msg) {\n    queue.push( expr ? `!pass ${msg}` : `?fail ${msg}` )\n  }\n}\n\n\n}(\"goodbye and thanks for all the fish\")"
    },
    {
      "name": "arcgis-jsapi-3x.js",
      "content": "window.$jsapi3x = window.$jsapi3x || {\n    zoomToFeatureLayer: null,\n    parseUrl: null,\n    xyToLngLat: null\n};\n\n$jsapi3x.zoomToFeatureLayer = function(view){\n    view.then(() => {\n        layer.queryExtent().then(res => {\n          view.goTo(res.extent);\n        }).catch(e => {\n          console.log(e)\n        })\n    });\n}\n\n$jsapi3x.parseUrl = function(){\n    require([\"esri/urlUtils\"], function(urlUtils) { \n        console.log(\"urlObj = \", urlUtils.urlToObject(window.location.href));\n    });\n}\n\n$jsapi3x.xyToLngLat = function(){\n    require([\"esri/geometry/webMercatorUtils\"], function(webMercatorUtils) { \n        var normalizedVal = webMercatorUtils.xyToLngLat(42215329, 1321748);\n        console.log(\"normalizedVal = \", normalizedVal);\n    });\n}"
    },
    {
      "name": "arcgis-web-appbuilder.js",
      "content": "window.$arcgisWab = window.$arcgisWab || {\n    getAppConfig: null,\n    queryObject: null\n}\n\n$arcgisWab.getAppConfig = function(){\n    console.log(\"getAppConfig() = \", getAppConfig());\n}\n\n$arcgisWab.queryObject = function(){\n    console.log(\"queryObject = \", queryObject);\n}"
    },
    {
      "name": "arcgis-storymaps.js",
      "content": "// Check global variable: app\nconsole.log(\"Global variable 'app' = \", app)\n\n/*\n    Event subscription (custom-scripts.js): \n    topic.subscribe(\"event-name\", function(result){}); (event name sample: story-loaded-map)\n\n    Event emition (sample):\n    topic.publish('maptiks-ready', mapWrapper, response, secTitle);\n*/\n\n/*\n    VIDEOS:\n    * Story Maps: Configuring and Customizing Web Apps: https://www.youtube.com/watch?v=XfPMFRnm_Pk\n    * Desmitificando la personalización de storymaps (extended): https://www.youtube.com/watch?v=yAWl9ccSbOg&t=14s\n\n    OTROS RECURSOS:\n    Storymaps @ Awesome ArcGIS: http://bit.ly/2CEtzPn\n    Troubleshoot Story maps (under construction): bit.ly/2CCjGlo\n    Guía práctica para encontrar recursos: bit.ly/2D2ZZE2\n*/"
    },
    {
      "name": "arcgis-rest-api.js",
      "content": "// Pending (arcgis-rest-js)\n// github.com/Esri/arcgis-rest-js\n\n(function () {\n    var s = document.createElement('script');\n    s.setAttribute('src', '//unpkg.com/....');\n    s.addEventListener('load', function(){\n      console.log('arcgis-rest-js loaded!');\n    });\n    document.body.appendChild(s);\n})();"
    },
    {
      "name": "log-globals.js",
      "content": "/*\n\tlog-globals\n\tby Sindre Sorhus\n\thttps://github.com/sindresorhus/log-globals\n\tMIT License\n*/\n(function () {\n\t'use strict';\n\n\tfunction getIframe() {\n\t\tvar el = document.createElement('iframe');\n\t\tel.style.display = 'none';\n\t\tdocument.body.appendChild(el);\n\t\tvar win = el.contentWindow;\n\t\tdocument.body.removeChild(el);\n\t\treturn win;\n\t}\n\n\tfunction detectGlobals() {\n\t\tvar iframe = getIframe();\n\t\tvar ret = Object.create(null);\n\n\t\tfor (var prop in window) {\n\t\t\tif (!(prop in iframe)) {\n\t\t\t\tret[prop] = window[prop];\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tconsole.log(detectGlobals());\n})();"
    },
    {
      "name": "jqueryfy.js",
      "content": "// jquerify.js\n// https://github.com/bgrins/devtools-snippets\n// Add jQuery to any page that does not have it already.\n\n(function () {\n\n  if ( !window.jQuery ) {\n    var dollarInUse = !!window.$;\n    var s = document.createElement('script');\n    s.setAttribute('src', '//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js');\n    s.addEventListener('load', function(){\n      console.log('jQuery loaded!');\n\n      if(dollarInUse) {\n        jQuery.noConflict();\n        console.log('`$` already in use; use `jQuery`');\n      }\n    });\n\n    document.body.appendChild(s);\n  }\n\n})();"
    }
  ]
}